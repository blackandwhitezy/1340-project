For each 
customer, use rand() and goods[] to generate his choice for each good. Sum\
The key problem of this project is how to optimize
parameter settings:
TIME=90//10-second checkout time per item.//the waiting time is longer than 15 minutes
input:
1. goods.txt(ifstream)//Convert goods.txt to goods, an array of good type.
2. cus_no(istream)//Read cus_no from user. 
3. TIME=90//10-second checkout time per item.
4. CUS_MAX
5.
6.
output:
1. Raw_Customer.txt to store the customer information(1. the id of the customer; 2. his bought goods sturcture )
2. Cashier_Arrangement.txt to store arrangement of each chashier.
struct:
1. customer{
  double profit;
  int item_no;
};
array:
1. goods.txt->good goods[]
2. package[cus_no_updated+1][TIME+1]
3. line(per counter)==package[cus_no_updated][TIME].id_ptr[TIME]
4. static array
prints:
1. after user input cus_no:
print cus_id, goods; good_nos;
2. after sorting the cus_raw:
print (counter_id, line)(s)
print cus_drain
print net_profit

